// Generated by CoffeeScript 1.9.3
(function($, window, document) {
  var EPluginName, EPluginVersion, ETooltips;
  EPluginName = 'ETooltips';
  EPluginVersion = '@VERSION';
  ETooltips = (function() {
    ETooltips.defaults = {
      event: 'mouseover',
      pos: 'right',
      close: true,
      width: null,
      content: null,
      id: 'ETooltips-{uid}',
      x: 0,
      y: 0,
      zIndex: null,
      rmTitle: true,
      template: '<div class="ETooltips ETooltips-{pos}"> <div class="ETooltips-arr"></div> <div class="ETooltips-close" data-tooltips="close" style="display:none;">&times;</div> <div class="ETooltips-con" data-tooltips="content">{content}</div> </div>',
      selector: {
        trigger: '[data-role="tooltips"]',
        content: '[data-tooltips="content"]',
        close: '[data-tooltips="close"]'
      }
    };

    function ETooltips($element, options) {
      this.$el = $element;
      this._name = EPluginName;
      this._version = EPluginVersion;
      this._uid = this.$el.data('Eguid');
      this.settings = $.extend(true, {}, ETooltips.defaults, options);
      this.init();
    }

    ETooltips.prototype.init = function() {
      this.bindEvent();
      return this.insertTooltips();
    };

    ETooltips.prototype.bindEvent = function() {
      var $document, eventClose, eventEnter, eventExit, self;
      self = this;
      $document = $(document);
      eventEnter = ['mouseenter', this._name].join('.');
      eventExit = ['mouseleave', this._name].join('.');
      this.$el.unbind(eventEnter).bind(eventEnter, function() {
        self.calPos();
        return self.$tooltips.show();
      });
      this.$el.unbind(eventExit).bind(eventExit, function() {
        return self.$tooltips.hide();
      });
      eventClose = ['click', this._name, this._uid].join('.');
      return $document.undelegate(eventClose).delegate(this.settings.selector.close, eventClose, function() {
        return self.$tooltips.hide();
      });
    };

    ETooltips.prototype.calPos = function() {
      var ARROW_WIDTH, height, oLeft, oTop, settings, width;
      oTop = this.$el.offset().top;
      oLeft = this.$el.offset().left;
      width = this.$el.outerWidth();
      height = this.$el.outerHeight();
      ARROW_WIDTH = 5;
      settings = this.settings;
      switch (settings.pos) {
        case 'top':
          oTop = oTop + settings.y - this.height - ARROW_WIDTH;
          oLeft = oLeft + settings.x;
          break;
        case 'right':
          oTop = oTop + settings.y;
          oLeft = oLeft + settings.x + width + ARROW_WIDTH;
          break;
        case 'bottom':
          oTop = oTop + settings.y + height + ARROW_WIDTH;
          oLeft = oLeft + settings.x;
          break;
        case 'left':
          oTop = oTop + settings.y;
          oLeft = oLeft + settings.x - this.width - ARROW_WIDTH;
          break;
        default:
          throw new Error('[Pos]ition not given.');
      }
      return this.$tooltips.css({
        top: oTop,
        left: oLeft
      });
    };

    ETooltips.prototype.insertTooltips = function() {
      var $tooltips, content, id, settings, style, tipsHTML;
      settings = this.settings;
      id = settings.id.replace('{uid}', this._uid);
      $tooltips = $('#' + id);
      if ($tooltips.length) {
        false;
      }
      content = settings.content || this.$el.attr('title' || '[error] title or content not given.');
      tipsHTML = settings.template.replace('{pos}', settings.pos).replace('{content}', content);
      this.$tooltips = $(tipsHTML);
      this.$tooltips.attr('id', id);
      $('body').append(this.$tooltips);
      if (settings.close) {
        this.$tooltips.find(settings.selector.close).show();
      }
      if (settings.rmTitle) {
        this.$el.remove('title');
      }
      style = {};
      if (settings.width) {
        style['width'] = settings.width;
      }
      if (settings.zIndex) {
        style['z-index'] = settings.zIndex;
      }
      this.$tooltips.css(style);
      this.width = this.$tooltips.outerWidth();
      return this.height = this.$tooltips.outerHeight();
    };

    ETooltips.prototype.setContent = function(content) {
      return this.$tooltips.find(this.settings.selector.content).html(content);
    };

    return ETooltips;

  })();
  $.fn[EPluginName + '_guid'] = 0;
  return $.fn[EPluginName] = function(options) {
    if (!this.length) {
      return console.log("「" + EPluginName + "」 The elements[" + this.selector + "] you passed is empty.");
    } else {
      return this.each(function() {
        var $this, EPluginInstance;
        $this = $(this);
        $this.data('Eguid', $.fn[EPluginName + '_guid']++);
        EPluginInstance = new ETooltips($(this), options);
        if (!$this.data(EPluginName)) {
          return $this.data(EPluginName, EPluginInstance);
        }
      });
    }
  };
})(jQuery, window, document);

//# sourceMappingURL=tooltips.js.map
